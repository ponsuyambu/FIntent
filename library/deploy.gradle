apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'

def deploy = new Properties()
deploy.load(new FileInputStream("library/deploy.settings"))

version=deploy.version
group=deploy.groupId


Properties properties = new Properties()
//File propFile = "${System.properties['user.home']}${File.separator}.gradle${File.separator}bintray.properties" as File
File propFile = new File(rootDir,"bintray.properties")
if(propFile.exists()) //load only if bintray file is present
 properties.load(propFile.newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")
    publications = ['MyPublication']
//    configurations = ['archives']
    pkg {
        repo = "android"
        name = deploy.id
        websiteUrl = deploy.siteUrl
        vcsUrl = deploy.gitUrl
        licenses = deploy.licenses.split(',')
        publish = true
        version {
            name = deploy.version
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
    // options.encoding = 'UTF-8'
}

artifacts {
    archives javadocJar
    archives sourcesJar
}
// Create the pom configuration:
def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "suyambu"
            name "Ponsuyambu"
            email "suyambu.vps@gmail.com"
        }
    }
}

// Create the publication with the pom configuration:
publishing {
    publications {
        MyPublication(MavenPublication) {
            artifact javadocJar
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            artifact sourcesJar
            groupId deploy.groupId
            artifactId deploy.id
            version deploy.version
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Fragment Intent API to do fragment navigation easily')
                root.appendNode('name', 'FIntent')
                root.children().last() + pomConfig
            }
        }
    }
}

